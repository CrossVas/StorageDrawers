plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = "${minecraft_version}-${mod_version}"
group= "com.jaquadro.minecraft.storagedrawers" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "StorageDrawers"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: minecraft_version

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

	    // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'storagedrawers'

            mods {
                storagedrawers {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

	    // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'storagedrawers'

            mods {
                storagedrawers {
                    source sourceSets.main
                }
            }
        }

	// This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'storagedrawers'

            mods {
                storagedrawers {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'storagedrawers', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                storagedrawers {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral {
        content {
            excludeGroupByRegex "net\\.minecraftforge.*"
            excludeGroupByRegex "com\\.mojang.*"
            excludeGroupByRegex "cpw\\.mods.*"
            excludeGroupByRegex "mezz\\.jei.*"
            excludeGroupByRegex "curse\\.maven.*"
        }
    }
    maven {
        name = "JEI"
        url "https://dvs1.progwml6.com/files/maven"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        name = "CraftTweaker"
        url "https://maven.blamejared.com/"
    }
    maven {
        name 'TOP'
        url "https://maven.tterrag.com/"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    // JEI not yet updated for 41.0.64
    // runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    implementation fg.deobf("curse.maven:the-one-probe-245211:${top_id}")
    // compileOnly since not yet updated for 41.0.64
    implementation fg.deobf("curse.maven:jade-324717:${jade_id}")

//    implementation fg.deobf("curse.maven:spark-361579:3670050")

    //deobfCompile "MineTweaker3:MineTweaker3-API:${mt_version}"
    //deobfCompile "org.ow2.asm:asm-debug-all:5.0.3"

    //compile fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${minecraft_version}:${crafttweaker_version}")
}

task replaceResources(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand "version": mod_version, "mc_version": minecraft_version, "forge_version": min_forge_version, "loader_version": loader_version
    }
    into "$buildDir/resources/main/"
}

processResources {
    //Exclude the mods.toml file as we manually handle that and don't want it to invalidate our cache
    exclude 'META-INF/mods.toml'
    finalizedBy replaceResources
}

jar {
    dependsOn(replaceResources)
    manifest {
        attributes([
            "Specification-Title": "storagedrawers",
            "Specification-Vendor": "Texelsaur",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor" :"Texelsaur",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task deobfJar(type: Jar) {
    dependsOn(replaceResources)
    from sourceSets.main.output
    classifier = 'deobf'
}


task apiJar(type: Jar) {
    dependsOn(classes)
    dependsOn(replaceResources)
    classifier = 'api'
    include 'com/jaquadro/minecraft/storagedrawers/api/**/*'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    dependsOn(classes)
    dependsOn(replaceResources)
    classifier = 'sources'
    from sourceSets.main.allJava
}

tasks.build.dependsOn apiJar, sourcesJar

artifacts {
    archives apiJar
    archives sourcesJar
    archives deobfJar
    archives jar
}

publishing.publications {
    StorageDrawers(MavenPublication) {
        afterEvaluate {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.jar.archiveVersion
        }
        artifact sourcesJar
        artifact apiJar
        artifact deobfJar
        artifact jar
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

